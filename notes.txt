 - Examples of route paths based on strings

This route path will match acd and abcd.

app.get('/ab?cd', (req, res) => {
  res.send('ab?cd')
})
This route path will match abcd, abbcd, abbbcd, and so on.

app.get('/ab+cd', (req, res) => {
  res.send('ab+cd')
})

This route path will match abcd, abxcd, abRANDOMcd, ab123cd, and so on.

app.get('/ab*cd', (req, res) => {
  res.send('ab*cd')
})

This route path will match /abe and /abcde.

app.get('/ab(cd)?e', (req, res) => {
  res.send('ab(cd)?e')
})

- Route paths based on regular expressions.

This route path will match anything with an “a” in it.

app.get(/a/, (req, res) => {
  res.send('/a/')
})

This route path will match butterfly and dragonfly, but not butterflyman, dragonflyman, and so on.

app.get(/.*fly$/, (req, res) => {
  res.send('/.*fly$/')
})

- Controllers
    . Explore various response methods.
    . Implement error handling middleware to catch and process errors gracefully
    . Describe common use case for middleware such as validation and authetication

- Differnce between middldeware and Controllers
definition: Middleware functions are functions that have access to the request and response objects(req, res) and the next middldeware function in the application request-response cycle
Purpose: They can perfoam various tasks such as modifying the request and response objects , logging and authetication, parsing request bodies, handling errors.

definition: Controllers are the functions or methods that handle the business logic for specific routes. They are invoked at the end of the middldeware stack.
Purpose: Controllers process the incoming request data, interact with database, perform the required operations and send reponse back to the client. Controllers are usually the final pieces of middleware in the request-response cycle for a specific route.


- Middleware Functions:
  . modifying the request or response objects (Some packages for example will do this, like adding a new property in the request object, or setting the res.locals that is used in the templates with res.render)
  . Exectuing additional code (Validation middleware functions to validate the request before going to your main logic, authetication middleware functions and so on.)
  . Calling the next middleware function in the chain.
  . Ending the request-response cycle (meaning no further middleware functions are called, even if there are more in the chain) -- write out the code...
  . Application-level middleware
      Application-level middleware are bound to an instance of Express using app.use or app.<method> (eg. app.get, app.post)
  . Built-in middldeware
      Built-in middldeware include
        . Body parsers(e.g. express.json, express.urlencoded) - These allow us to correctly parse the incoming request body, so that you can use it through req.body
        . Servering static files: app.use(express.static)
        . setting up views
  . Router-level middldeware:
      works similarly to application-level middlewares but is bound to an instance of Express Router useing router.use of router.method
- Error handling
  error handling refers to how express catches and processes errors that ocurs both synchronosly and asynchronously.
  A Error handling middleware function and a request middldeware function, so they way express distinguishes this middleware function is through adding four parameters not a single one missing. A route middleware function with less than 4 pararmeter will always be considered as a request middleware function instead of this error middleware function even if it was placed last.
  
  Route handling middleware
  app.use((req, res, next) => {
  throw new Error("OH NO!");
  // or next(new Error("OH NO!"));
});
Error handling middleware
app.use((err, req, res, next) => {
  console.error(err);
  // You will see an OH NO! in the page, with a status code of 500 that can be seen in the network tab of the dev tools
  res.status(500).send(err.message);
});

